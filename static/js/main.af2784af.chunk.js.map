{"version":3,"sources":["components/Footer/Footer.js","components/Header/Header.js","components/CodeImage/CodeImage.js","App.js","serviceWorker.js","index.js"],"names":["FooterNav","class","HeaderNav","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","PurpleCode","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAWeA,MARf,WACI,OACI,4BAAQC,MAAM,6FACV,uBAAGA,MAAM,6CAAT,+B,MCsBGC,MAzBf,WACI,OACI,yBAAKC,UAAU,6DACX,uBAAGA,UAAU,sEAAsEC,KAAK,KAAxF,mBACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACxJ,0BAAMP,UAAU,yBAGpB,yBAAKA,UAAU,+CAA+CQ,GAAG,aAC7D,wBAAIR,UAAU,cACV,wBAAIF,MAAM,YACN,uBAAGA,MAAM,WAAWU,GAAG,WAAWP,KAAK,UAAS,uBAAGH,MAAM,gBAAzD,WAEJ,wBAAIA,MAAM,YACN,uBAAGA,MAAM,WAAWU,GAAG,eAAeP,KAAK,cAAa,uBAAGH,MAAM,uBAAjE,eAEJ,wBAAIA,MAAM,YACN,uBAAGA,MAAM,WAAWU,GAAG,aAAaP,KAAK,YAAW,uBAAGH,MAAM,oBAA7D,iB,MCLTW,MAVf,WACI,OACI,yBAAKT,UAAU,aACX,wBAAIA,UAAU,UAAd,W,MCQGU,MAVf,WACE,OACE,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.af2784af.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Footer.css\";\n\nfunction FooterNav() {\n    return (\n        <footer class=\"footer fixed-bottom footer-dark bg-dark d-flex justify-content-center custom-footerborder\">\n            <p class=\"navbar-brand text-white custom-background\">Alia Kyle Perry 2020 &copy;</p>\n        </footer>\n    )\n}\n\nexport default FooterNav;","import React from \"react\";\nimport \"./Header.css\";\n\nfunction HeaderNav() {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark custom-border\">\n            <a className=\"navbar-brand d-flex align-items-center text-white custom-background\" href=\"#\">Alia Kyle Perry</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                <span className=\"navbar-toggler-icon\"></span>\n            </button>\n\n            <div className=\"collapse navbar-collapse justify-content-end\" id=\"navbarNav\">\n                <ul className=\"navbar-nav\">\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" id=\"aboutbtn\" href=\"#About\"><i class=\"fas fa-user\"></i> About</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" id=\"portfoliobtn\" href=\"#portfolio\"><i class=\"fas fa-laptop-code\"></i> Portfolio</a>\n                    </li>\n                    <li class=\"nav-item\">\n                        <a class=\"nav-link\" id=\"contactbtn\" href=\"#contact\"><i class=\"far fa-envelope\"></i> Contact</a>\n                    </li>\n                </ul>\n            </div>\n        </nav>\n    )\n}\n\nexport default HeaderNav;","import React from \"react\";\nimport \"./CodeImage.css\";\n\n// var code = require('../../../src/images/');\n\nfunction PurpleCode() {\n    return (\n        <div className=\"parallax1\">\n            <h1 className=\"d-flex\">ABOUT</h1>\n        </div>\n    )\n}\n\n// console.log(code);\n\nexport default PurpleCode;","import React from 'react';\nimport FooterNav from './components/Footer/Footer';\nimport HeaderNav from './components/Header/Header';\nimport CodeImage from './components/CodeImage/CodeImage';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HeaderNav />\n      <CodeImage />\n      <FooterNav />\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}